@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@model IEnumerable<Quest>
@{
    ViewData["Title"] = "My Quests";
    var tokens = Antiforgery.GetAndStoreTokens(ViewContext.HttpContext);
}

<div class="mb-4">
    <h1>@ViewData["Title"]</h1>
</div>

@if (Model.Any())
{
    <div class="row">
        @foreach (var quest in Model)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card modern-card quest-card @(quest.IsFinalized ? "quest-status-finalized" : "quest-status-open")">
                    <div class="card-header modern-card-header d-flex justify-content-between align-items-center">
                        <span class="badge difficulty-@quest.Difficulty.ToString().ToLower()">
                            @quest.Difficulty
                        </span>
                        <small class="fw-bold">
                            @if (quest.IsFinalized)
                            {
                                <text><i class="fas fa-check-circle me-1"></i>Finalized</text>
                            }
                            else
                            {
                                <text><i class="fas fa-clock me-1"></i>Open</text>
                            }
                        </small>
                    </div>
                    <div class="card-body modern-card-body">
                        <h5 class="card-title text-warning">@quest.Title</h5>
                        <p class="card-text">@quest.Description</p>

                        @if (quest.IsFinalized)
                        {
                            <p class="card-text">
                                <strong class="text-warning">Date:</strong><br>
                                <small class="text-muted">@quest.FinalizedDate?.ToString("MMM dd, yyyy 'at' h:mm tt")</small>
                            </p>
                            <p class="card-text">
                                <strong class="text-warning">Players:</strong><br>
                                <small class="text-muted">@string.Join(", ", quest.PlayerSignups.Where(ps => ps.IsSelected).Select(ps => ps.Player.Name))</small>
                            </p>
                        }
                        else
                        {
                            <p class="card-text">
                                <strong class="text-warning">Signups:</strong> @quest.PlayerSignups.Count<br>
                                <strong class="text-warning">Created:</strong> @quest.CreatedAt.ToString("MMM dd, yyyy")
                            </p>
                        }
                    </div>
                    <div class="card-footer modern-card-footer">
                        <a href="@Url.Action("Details", "Quest", new { id = quest.Id })" class="btn btn-warning btn-sm me-2">
                            <i class="fas fa-eye me-1"></i>View
                        </a>
                        <a href="@Url.Action("Manage", "Quest", new { id = quest.Id })" class="btn btn-success btn-sm me-2">
                            <i class="fas fa-cogs me-1"></i>Manage
                        </a>
                        <a href="#" class="btn btn-danger btn-sm" onclick="deleteQuest(@quest.Id)">
                            <i class="fas fa-trash me-1"></i>Delete
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="card modern-card">
        <div class="card-body modern-card-body text-center py-5">
            <i class="fas fa-dragon fa-3x text-warning mb-3"></i>
            <h3 class="text-warning">No quests found</h3>
            <p class="text-muted">You haven't created any quests yet.</p>
            <a href="@Url.Action("Create", "Quest")" class="btn btn-warning">
                <i class="fas fa-plus me-2"></i>Create Your First Quest
            </a>
        </div>
    </div>
}

<script>
    function deleteQuest(id) {
        if (confirm("Are you sure?")) {
            fetch(`/Quest/Delete/${id}`, {
                method: "DELETE",
                headers: {
                    'RequestVerificationToken': '@tokens.RequestToken'
                }
            }).then(res => {
                if (res.ok) {
                    location.reload();
                } else {
                    alert("Delete failed.");
                }
            });
        }
    }
</script>